// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: controller.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addController = `-- name: AddController :exec
INSERT INTO controllers (id, serial_number, firmware_version)
VALUES ($1, $2, $3)
`

type AddControllerParams struct {
	ID              uuid.UUID `db:"id" json:"id"`
	SerialNumber    string    `db:"serial_number" json:"serialNumber"`
	FirmwareVersion string    `db:"firmware_version" json:"firmwareVersion"`
}

func (q *Queries) AddController(ctx context.Context, arg AddControllerParams) error {
	_, err := q.db.Exec(ctx, addController, arg.ID, arg.SerialNumber, arg.FirmwareVersion)
	return err
}

const addControllerSettings = `-- name: AddControllerSettings :exec
INSERT INTO controller_settings (id, auto_start, heartbeat_rate)
VALUES ($1, $2, $3)
`

type AddControllerSettingsParams struct {
	ID            uuid.UUID `db:"id" json:"id"`
	AutoStart     bool      `db:"auto_start" json:"autoStart"`
	HeartbeatRate int16     `db:"heartbeat_rate" json:"heartbeatRate"`
}

func (q *Queries) AddControllerSettings(ctx context.Context, arg AddControllerSettingsParams) error {
	_, err := q.db.Exec(ctx, addControllerSettings, arg.ID, arg.AutoStart, arg.HeartbeatRate)
	return err
}

const addControllerTelemetry = `-- name: AddControllerTelemetry :exec
INSERT INTO controller_telemetry (id, controller_id, output_power, soc, ev_discharging)
VALUES ($1, $2, $3, $4, $5)
`

type AddControllerTelemetryParams struct {
	ID            uuid.UUID   `db:"id" json:"id"`
	ControllerID  pgtype.UUID `db:"controller_id" json:"controllerId"`
	OutputPower   int32       `db:"output_power" json:"outputPower"`
	Soc           int16       `db:"soc" json:"soc"`
	EvDischarging bool        `db:"ev_discharging" json:"evDischarging"`
}

func (q *Queries) AddControllerTelemetry(ctx context.Context, arg AddControllerTelemetryParams) error {
	_, err := q.db.Exec(ctx, addControllerTelemetry,
		arg.ID,
		arg.ControllerID,
		arg.OutputPower,
		arg.Soc,
		arg.EvDischarging,
	)
	return err
}

const getControllerById = `-- name: GetControllerById :one
SELECT c.id, c.serial_number, c.firmware_version, cs.id, cs.auto_start, cs.heartbeat_rate, cs.updated_at
FROM controllers c
JOIN public.controller_settings cs ON c.id = cs.id
WHERE c.id = $1
`

type GetControllerByIdRow struct {
	ID                uuid.UUID         `db:"id" json:"id"`
	SerialNumber      string            `db:"serial_number" json:"serialNumber"`
	FirmwareVersion   string            `db:"firmware_version" json:"firmwareVersion"`
	ControllerSetting ControllerSetting `db:"controller_setting" json:"controllerSetting"`
}

func (q *Queries) GetControllerById(ctx context.Context, id uuid.UUID) (GetControllerByIdRow, error) {
	row := q.db.QueryRow(ctx, getControllerById, id)
	var i GetControllerByIdRow
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.FirmwareVersion,
		&i.ControllerSetting.ID,
		&i.ControllerSetting.AutoStart,
		&i.ControllerSetting.HeartbeatRate,
		&i.ControllerSetting.UpdatedAt,
	)
	return i, err
}

const getControllerTelemetryByControllerId = `-- name: GetControllerTelemetryByControllerId :many
SELECT id, controller_id, timestamp, output_power, soc, ev_discharging FROM controller_telemetry
WHERE controller_id = $1
`

func (q *Queries) GetControllerTelemetryByControllerId(ctx context.Context, controllerID pgtype.UUID) ([]ControllerTelemetry, error) {
	rows, err := q.db.Query(ctx, getControllerTelemetryByControllerId, controllerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ControllerTelemetry
	for rows.Next() {
		var i ControllerTelemetry
		if err := rows.Scan(
			&i.ID,
			&i.ControllerID,
			&i.Timestamp,
			&i.OutputPower,
			&i.Soc,
			&i.EvDischarging,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPairedControllerByUserId = `-- name: GetPairedControllerByUserId :one
SELECT c.id, c.serial_number, c.firmware_version, cs.id, cs.auto_start, cs.heartbeat_rate, cs.updated_at
FROM controllers c
JOIN public.controller_settings cs ON c.id = cs.id
WHERE c.user_id = $1
`

type GetPairedControllerByUserIdRow struct {
	ID                uuid.UUID         `db:"id" json:"id"`
	SerialNumber      string            `db:"serial_number" json:"serialNumber"`
	FirmwareVersion   string            `db:"firmware_version" json:"firmwareVersion"`
	ControllerSetting ControllerSetting `db:"controller_setting" json:"controllerSetting"`
}

func (q *Queries) GetPairedControllerByUserId(ctx context.Context, userID pgtype.UUID) (GetPairedControllerByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getPairedControllerByUserId, userID)
	var i GetPairedControllerByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.FirmwareVersion,
		&i.ControllerSetting.ID,
		&i.ControllerSetting.AutoStart,
		&i.ControllerSetting.HeartbeatRate,
		&i.ControllerSetting.UpdatedAt,
	)
	return i, err
}

const pairUserToController = `-- name: PairUserToController :exec
UPDATE controllers
SET user_id = $2, updated_at = CURRENT_TIMESTAMP
WHERE serial_number = $1
`

type PairUserToControllerParams struct {
	SerialNumber string      `db:"serial_number" json:"serialNumber"`
	UserID       pgtype.UUID `db:"user_id" json:"userId"`
}

func (q *Queries) PairUserToController(ctx context.Context, arg PairUserToControllerParams) error {
	_, err := q.db.Exec(ctx, pairUserToController, arg.SerialNumber, arg.UserID)
	return err
}

const updateControllerSettings = `-- name: UpdateControllerSettings :exec
UPDATE controller_settings
SET auto_start = $2, heartbeat_rate = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateControllerSettingsParams struct {
	ID            uuid.UUID `db:"id" json:"id"`
	AutoStart     bool      `db:"auto_start" json:"autoStart"`
	HeartbeatRate int16     `db:"heartbeat_rate" json:"heartbeatRate"`
}

func (q *Queries) UpdateControllerSettings(ctx context.Context, arg UpdateControllerSettingsParams) error {
	_, err := q.db.Exec(ctx, updateControllerSettings, arg.ID, arg.AutoStart, arg.HeartbeatRate)
	return err
}
