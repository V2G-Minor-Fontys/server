// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: identity.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, identity_id, expires_at)
VALUES ($1, $2, $3)
RETURNING token, identity_id, created_at, expires_at
`

type CreateRefreshTokenParams struct {
	Token      []byte    `db:"token"`
	IdentityID uuid.UUID `db:"identity_id"`
	ExpiresAt  time.Time `db:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken, arg.Token, arg.IdentityID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.IdentityID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteIdentityById = `-- name: DeleteIdentityById :exec
DELETE FROM identities
WHERE id = $1
`

func (q *Queries) DeleteIdentityById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteIdentityById, id)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :execrows
DELETE FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, token []byte) (int64, error) {
	result, err := q.db.Exec(ctx, deleteRefreshToken, token)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getIdentityById = `-- name: GetIdentityById :one
SELECT id, username, password_hash, created_at FROM identities
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIdentityById(ctx context.Context, id uuid.UUID) (Identity, error) {
	row := q.db.QueryRow(ctx, getIdentityById, id)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getIdentityByUsername = `-- name: GetIdentityByUsername :one
SELECT id, username, password_hash, created_at FROM identities
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetIdentityByUsername(ctx context.Context, username string) (Identity, error) {
	row := q.db.QueryRow(ctx, getIdentityByUsername, username)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token, identity_id, created_at, expires_at FROM refresh_tokens
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetRefreshToken(ctx context.Context, token []byte) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.IdentityID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getRefreshTokenByIdentityId = `-- name: GetRefreshTokenByIdentityId :one
SELECT token, identity_id, created_at, expires_at FROM refresh_tokens
WHERE identity_id = $1 LIMIT 1
`

func (q *Queries) GetRefreshTokenByIdentityId(ctx context.Context, identityID uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByIdentityId, identityID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.IdentityID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const register = `-- name: Register :exec
INSERT INTO identities (id, username, password_hash)
VALUES ($1, $2, $3)
`

type RegisterParams struct {
	ID           uuid.UUID `db:"id"`
	Username     string    `db:"username"`
	PasswordHash string    `db:"password_hash"`
}

func (q *Queries) Register(ctx context.Context, arg RegisterParams) error {
	_, err := q.db.Exec(ctx, register, arg.ID, arg.Username, arg.PasswordHash)
	return err
}
